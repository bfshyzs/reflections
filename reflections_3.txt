When would you want to use a remote repository rather than keeping all
your work local?

A remote repository is advisable when there is more than 1 person working
on a project that is under GIT version control.


Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

Pulling manually put the control in the hands of the user as to when the
local repository is updated, and also, what branch to pull.


Describe the differences between forks, clones, and branches. When would
you use one instead of another?

A git clone is a copy of a git repository.
A git fork is a copy of a git repository that still maintains a relationship
with the original repository.
A branch is a separate line of changes for an artifact within a repository.
These changes may be made for various reasons, defect fix, new enhancement, etc.


What is the benefit of having a copy of the last known state of the
remote stored locally?

The git pull keeps the local repo branch up to date with the remote repo.
The git fetch command imports commits from a remote repository into your
local repo. The resulting commits are stored as remote branches instead
of the normal local branches. This gives
you a chance to review changes before integrating them into your copy
of the project.
The advantage using either method is you have the latest copy of the
remote before you begin to make changes.


How would you collaborate without using Git or GitHub? What would be
easier, and what would be harder?

Without the combination of Git and GitHub, all collaborators would
be using a single repo. I can envision a number of branches for each
collaborator. Having a Git and GitHub allows all collaborators to make changes
to a local repo, and only push the changes that are relevant to a shared
repo.
